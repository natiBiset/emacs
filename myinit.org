* basic
#+begin_src emacs-lisp
    (setq inhibit-startup-message t)
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-set-key (kbd "<f5>") 'revert-buffer)
    (tool-bar-mode -1)
    (setq load-prefer-newer t)

    (column-number-mode)
  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
		  prog-mode-hook
		  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))
  ;; Override some modes which derive from the above
    (dolist (mode '(org-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src
** powerline
  #+begin_src emacs-lisp
    (use-package powerline
    :ensure t
    :config (powerline-default-theme))
  #+end_src
* try
#+begin_src emacs-lisp
 
(use-package try
  :ensure t)
  
#+end_src
* which
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))  
#+end_src
* theme
#+begin_src emacs-lisp
    (use-package zenburn-theme
    :ensure t
    :config (load-theme 'zenburn t))
#+end_src
* org mode
** bullets
#+begin_src emacs-lisp
  (use-package org-superstar
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

#+end_src

** collapse at first open
#+BEGIN_SRC emacs-lisp
  (setq org-startup-folded t)
  (add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC

** states
#+BEGIN_SRC emacs-lisp
    ;; TODO states
  (setq org-todo-keywords
        '((sequence "SOMEDAY(s)" "TODO(t)" "PLANNING(p)" "IN-PROGRESS(i@/!)" "VERIFYING(v!)"   "|" "DONE(d!)" "WONT-DO(w@/!)" )
          ))

  (setq org-todo-keyword-faces
      '(("TODO" . "green")
        ("SOMEDAY" . "blue")
        ("PLANNING"."yellow")
        ("IN-PROGRESS" . "yellow")
        ("VERIFYING" . "green")
        ("DONE" .  (:foreground "violet" :weight bold))
        ("WONT-DO" . (:foreground "red" :weight bold))
        ))
  ;;TAGS
  (setq org-tag-alist '(("@question" . ?q) ("@reference" . ?r) ("issue" . ?i) ("undone" . ?u)))
#+END_SRC

** agenda
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda) 
  (setq org-agenda-files (directory-files-recursively "~/Documents/org" "\\.org$"))
  ;;    (setq org-agenda-files '("~/Documents/org"))
                                          ;link copy
  (global-set-key (kbd "C-c l") 'org-store-link)
      ;capture
  (define-key global-map "\C-cc" 'org-capture)
  (setq org-log-done 'time)
#+END_SRC

** capture templates
  #+BEGIN_SRC emacs-lisp
        (setq org-capture-templates
          '(
        ;    ;work-log
       ;     ("w" "Work Log Entry"
      ;       entry (file+datetree "~/Documents/org/work-log.org")
     ;        "* %?"
    ;         :empty-lines 0)
         ;BIN
                    ;work-log
        ("b" "bin"
         entry (file+datetree "~/Documents/org/bin.org")
         "* %?"
         :empty-lines 0)

            ;note    
        ("n" "Note"
         entry (file+headline "~/Documents/org/notes.org" "Random Notes")
         "** %?"
         :empty-lines 0)

            ;note    
        ("q" "quotes"
         entry (file+headline "~/Documents/org/quotes.org" "QUOTES")
         "** %?"
         :empty-lines 0)
                                            ;todo

        ("t" "General To-Do"
         entry (file+headline "~/Documents/org/to.org" "General Tasks")
         "* TODO [#B] %?"
         :empty-lines 0)))

  #+END_SRC

* undo-redo
 #+BEGIN_SRC emacs-lisp
   (use-package undo-fu
     :ensure t
     :config
     (global-unset-key (kbd "C-z"))
     (global-set-key (kbd "C-z")   'undo-fu-only-undo)
     (global-set-key (kbd "C-S-z") 'undo-fu-only-redo))
 #+END_SRC

* completion
*** company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 1)
    (global-company-mode t)
    (add-hook 'after-init-hook 'global-company-mode))
  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))
  
#+end_src

*** navigation
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    )

  (use-package swiper
    :ensure try
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))



  (setq ivy-re-builders-alist
       '((read-file-name-internal . ivy--regex-fuzzy)
	 (t . ivy--regex-plus)))


#+END_SRC 

* pdf
#+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :ensure t
      :config
      (pdf-tools-install))

    (use-package org-noter-pdftools
      :ensure t)

    (use-package org-noter
      :ensure t
      :config
      ;; Your org-noter config ........
      (require 'org-noter-pdftools))

    (use-package org-pdftools
      :hook (org-mode . org-pdftools-setup-link))

    (use-package org-noter-pdftools
      :after org-noter
      :config
      ;; Add a function to ensure precise note is inserted
      (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
	(interactive "P")
	(org-noter--with-valid-session
	 (let ((org-noter-insert-note-no-questions (if toggle-no-questions
						       (not org-noter-insert-note-no-questions)
						     org-noter-insert-note-no-questions))
	       (org-pdftools-use-isearch-link t)
	       (org-pdftools-use-freepointer-annot t))
	   (org-noter-insert-note (org-noter--get-precise-info)))))

      ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
      (defun org-noter-set-start-location (&optional arg)
	"When opening a session with this document, go to the current location.
    With a prefix ARG, remove start location."
	(interactive "P")
	(org-noter--with-valid-session
	 (let ((inhibit-read-only t)
	       (ast (org-noter--parse-root))
	       (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
	   (with-current-buffer (org-noter--session-notes-buffer session)
	     (org-with-wide-buffer
	      (goto-char (org-element-property :begin ast))
	      (if arg
		  (org-entry-delete nil org-noter-property-note-location)
		(org-entry-put nil org-noter-property-note-location
			       (org-noter--pretty-print-location location))))))))
      (with-eval-after-load 'pdf-annot
	(add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
    (use-package nov
      :ensure t)
    (use-package djvu
      :ensure t)
#+END_SRC

* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    (message "Loading Magit!")
    :config
    (message "Loaded Magit!")
    :bind (("C-x g" . magit-status)
           ("C-x C-g" . magit-status)))
#+END_SRC

* projectile
#+BEGIN_SRC emacs-lisp

  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
      (projectile-mode +1))  

#+END_SRC
* lsp-mode
#+begin_src emacs-lisp
    ;	(defun efs/lsp-mode-setup ()
  ;	  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  ;	  (lsp-headerline-breadcrumb-mode))


    (use-package lsp-mode
      :ensure t
      :commands (lsp lsp-deferred)
					    ;	:hook (lsp-mode . efs/lsp-mode-setup)
      :init
      (setq lsp-keymap-prefix "C-x l" )  ;; Or 'C-l', 's-l'
      :config
      (lsp-enable-which-key-integration t))
  (setq lsp-enable-file-watchers t)
    (use-package lsp-ui
      :ensure t
	    :hook (lsp-mode . lsp-ui-mode)
	    :custom
	    (lsp-ui-doc-position 'bottom))
    (use-package lsp-treemacs
      :ensure t
      :after lsp)
    (use-package lsp-ivy
      :ensure t)
#+end_src
* python
#+BEGIN_SRC emacs-lisp

      (use-package lsp-pyright
	  :ensure t
	  :hook (python-mode . (lambda ()
				 (require 'lsp-pyright)
				 (lsp-deferred))))  ; or lsp-deferred

  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
  (setq lsp-enable-symbol-highlighting t)
  (setq lsp-file-watch-threshold 2000)

  (use-package direnv
    :ensure t
    :config
    (direnv-mode))

#+END_SRC
